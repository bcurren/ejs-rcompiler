require File.expand_path("#{File.dirname(__FILE__)}/parser")
require File.expand_path("#{File.dirname(__FILE__)}/parse_error")

module Ejs
  AUTOGENERATED = "// Autogenerated from an Ejs file. Edits may be lost.\n"
  
  class Compiler
    def initialize
      @parser = Parser.new
    end
    
    def compile(source_path, namespace = nil, target_path = source_path.gsub(/\.ejs\Z/, '.js'))
      File.open(target_path, 'w') do |target_file|
        target_file.write(AUTOGENERATED+"\n\n")
        target_file.write(js_source(source_path, namespace))
      end
    end
    
    # compile a ejs file into javascript
    def js_source(source_path, namespace = nil, output_as_array = false)
      template_name = File.basename(source_path, ".ejs")
      template_name = "#{namespace}.#{template_name}" if namespace
      
      js_source_from_string(template_name, File.read(source_path), output_as_array)
    end
    
    # compile a string containing ejs source into javascript
    def js_source_from_string(template_name, content, output_as_array = false)
      buffer = []
      parsed = @parser.parse(content)
      if parsed.nil?
        raise ParseError.new(@parser.failure_reason, @parser.failure_line, @parser.failure_column)
      end
      
      template_namespace(buffer, template_name)
      template_header(buffer, template_name)
      parsed.elements.each do |element|
        push_content(buffer, element)
      end
      template_footer(buffer)
            
      output_as_array ? buffer : buffer.join("\n")
    end
    
    private
    
    def template_namespace(buffer, template_name)
      ns = template_name.split(".")
      ns_str = "window"
      begin
        ns_str = "#{ns_str}.#{ns.shift}"
        buffer.push("#{ns_str} = #{ns_str} || {};")
      end until ns.empty?
    end
    
    def template_header(buffer, template_name)
      buffer.push("#{template_name}.template = function(options) {")
      buffer.push("  var p = [];")
      buffer.push("  with(options) {")
    end
    
    def push_content(buffer, element)
      case element.node_type
      when 'static_content'
        buffer.push("    p.push('#{escape(element.text_value)}');")
      when 'scriplet'
        buffer.push("    #{element.text_value.strip}")
      when 'expression'
        buffer.push("    p.push(#{element.text_value.strip});")
      when 'comment'
        buffer.push("    /*#{element.text_value}*/")
      else
        raise "Unknown node_type encountered while parsing: #{element.node_type}"
      end
    end
    
    def template_footer(buffer)
      buffer.push("  }")
      buffer.push("  return p.join('');")
      buffer.push("}")
    end
    
    def escape(content)
      content.
        gsub(/\n/, '\n').
        gsub(/\t/, '\t').
        gsub(/"/, '\"').
        gsub(/'/, "\\\\'") # yes, this is how you escape a single quote
    end
  end
end
